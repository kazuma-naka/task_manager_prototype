name: Create Release and Upload Binaries

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build with PyInstaller
        run: pyinstaller --name "TaskManager" --onefile --windowed task_manager.py

      # Make OS-specific filenames, and for macOS zip the .app and remove the folder
      - name: Prepare release asset
        shell: bash
        run: |
          set -e
          if [ "$RUNNER_OS" = "Windows" ]; then
            mv dist/TaskManager.exe dist/TaskManager-windows.exe
            echo "ASSET_PATH=dist/TaskManager-windows.exe" >> $GITHUB_ENV
          elif [ "$RUNNER_OS" = "Linux" ]; then
            mv dist/TaskManager dist/TaskManager-linux
            echo "ASSET_PATH=dist/TaskManager-linux" >> $GITHUB_ENV
          else
            # macOS: PyInstaller creates TaskManager.app (bundle). Zip it, then delete the bundle dir.
            # If your build produced an .app elsewhere, adjust the path accordingly.
            cd dist
            if [ -d "TaskManager.app" ]; then
              /usr/bin/zip -r TaskManager-macos.zip TaskManager.app
              rm -rf TaskManager.app
            fi
            cd -
            echo "ASSET_PATH=dist/TaskManager-macos.zip" >> $GITHUB_ENV
          fi

      # Upload ONLY the single file per OS, not the whole dist folder
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: TaskManager-${{ matrix.os }}
          path: ${{ env.ASSET_PATH }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_assets/

      # Optionally show what weâ€™re about to upload (debugging)
      - name: List files
        run: |
          echo "Release assets:"
          find release_assets -maxdepth 3 -type f -print

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release_assets/**/TaskManager-windows.exe
            release_assets/**/TaskManager-linux
            release_assets/**/TaskManager-macos.zip
          generate_release_notes: true
